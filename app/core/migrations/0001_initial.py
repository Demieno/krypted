# Generated by Django 2.0.3 on 2018-11-11 05:27

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('avatar', models.URLField(blank=True, max_length=255, null=True)),
                ('biography', models.TextField(blank=True, null=True)),
                ('region', models.CharField(choices=[('NA', 'North America'), ('EU', 'Europe'), ('OC', 'Oceania & Asias')], max_length=2)),
                ('activation_key', models.UUIDField(blank=True, default=uuid.uuid4, null=True)),
            ],
            options={
                'abstract': False,
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32)),
                ('description', models.TextField()),
                ('date', models.DateField()),
                ('password', models.CharField(max_length=5)),
                ('value', models.DecimalField(decimal_places=1, max_digits=3)),
            ],
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('group_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='auth.Group')),
                ('description', models.TextField()),
                ('type', models.CharField(choices=[('PUBLIC', 'Public'), ('PROTECTED', 'PROTECTED'), ('PRIVATE', 'PRIVATE')], max_length=12)),
            ],
            bases=('auth.group',),
            managers=[
                ('objects', django.contrib.auth.models.GroupManager()),
            ],
        ),
        migrations.CreateModel(
            name='GroupRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('request_date', models.DateField(auto_now=True)),
                ('response_action', models.CharField(choices=[('PENDING', 'Pending'), ('ACCEPTED', 'Accepted'), ('REJECTED', 'Rejected'), ('RETRACTED', 'Retracted')], max_length=32)),
                ('response_date', models.DateField(blank=True, null=True)),
                ('request_group', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='core.Group')),
                ('request_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_request_request_user', to=settings.AUTH_USER_MODEL)),
                ('response_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'permissions': (('manage_group_requests', 'Can manage group requests.'), ('audit_group_requests', 'Can view the group request audit log.')),
            },
        ),
        migrations.CreateModel(
            name='Guild',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32)),
                ('slug', models.CharField(max_length=8)),
                ('date_formed', models.DateField(auto_now=True)),
                ('image', models.URLField()),
                ('group', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='guild_group', to='core.Group')),
            ],
        ),
        migrations.CreateModel(
            name='GuildApplication',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('ACCEPTED', 'Accepted'), ('REJECTED', 'Rejected')], max_length=16)),
                ('request_date', models.DateField(auto_now=True)),
                ('response_date', models.DateField(blank=True, null=True)),
                ('request_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='guild_application_request_user', to=settings.AUTH_USER_MODEL)),
                ('response_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='guild_application_response_user', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'permissions': (('manage_guild_applications', 'Can manage Guild applications'), ('audit_eve_applications', 'Can audit an EVE application')),
            },
        ),
        migrations.CreateModel(
            name='GuildApplicationQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32)),
                ('help_text', models.TextField()),
                ('type', models.CharField(choices=[('RESPONSE', 'Response'), ('MODAL', 'Modal')], max_length=16)),
                ('choices', models.CharField(max_length=256)),
            ],
        ),
        migrations.CreateModel(
            name='GuildApplicationResponse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('response', models.TextField()),
                ('application', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.GuildApplication')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.GuildApplicationQuestion')),
            ],
        ),
        migrations.CreateModel(
            name='GuildApplicationTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('guild', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='core.Guild')),
                ('questions', models.ManyToManyField(blank=True, to='core.GuildApplicationQuestion')),
            ],
        ),
        migrations.AddField(
            model_name='guildapplication',
            name='template',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.GuildApplicationTemplate'),
        ),
        migrations.AddField(
            model_name='group',
            name='guild',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='group_guild', to='core.Guild'),
        ),
        migrations.AddField(
            model_name='group',
            name='managers',
            field=models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='event',
            name='guild',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.Guild'),
        ),
        migrations.AddField(
            model_name='event',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, to='core.Group'),
        ),
        migrations.AddField(
            model_name='user',
            name='guilds',
            field=models.ManyToManyField(blank=True, to='core.Guild'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
