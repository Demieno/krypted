#!/bin/bash

usage () {
  echo "Usage: ${0} COMMAND CONFIG [--skip-prereqs] [--docker-args STRING]"
  echo "Commands:"
  echo "    env:       Create a Python virtual environment"
  echo "    install:   Run the installation script"
  echo "    test:      Run tests with coverage"
  echo "    run:       Runs Django webserver"
  echo "    start:     Runs the Django webserver"
  echo "    migrate:   Runs the Django migrations"
  echo "    celery:    Runs celery worker and beat"
  echo "    flower:    Runs celery flower"
  echo "    shell:     Runs the django shell"
}

command=$1

if [ -z "$command" ]; then
    usage
    exit 1
fi

run_env() {
    python3 -m venv myvenv
}

run_install() {
    ./install/install.sh dev
}

run_test() {
    cd ./app
    coverage run --omit=**/tests.py,./install/*,./launcher,**/wsgi.py,**/manage.py --source=. ./manage.py test --noinput --settings=app.settings 
    cd ../
}

run_server() {
    cd ./app/
    python3 manage.py runserver
}

run_shell() {
    cd ./app/
    python3 manage.py shell
}

run_migrate() {
    cd ./app/
    python3 manage.py makemigrations
    python3 manage.py migrate 
    cd ..
}

run_celery() {
    cd ./app/
    celery -A app worker --beat --scheduler django_celery_beat.schedulers:DatabaseScheduler --loglevel=debug
}

run_celery_flower() {
    cd ./app/
    celery flower -A app --address=127.0.0.1 --port=5555
}

case "$command" in 
    env)
        run_env
        echo "Virtual Environment created"
        exit 0
        ;;
    
    install)
        run_install
        exit 0
        ;;
    test)
        run_test
        exit 0
        ;;
    run)
        run_server 
        exit 0
        ;;
    start)
        run_server 
        exit 0
        ;;
    celery)
        run_celery 
        exit 0 
        ;;
    flower)
        run_celery_flower 
        exit 0 
        ;;
    shell)
        run_shell 
        exit 0 
        ;;
    migrate) 
        run_migrate 
        exit 0 
        ;;
    *)
        usage
        exit 1
        ;;
esac
